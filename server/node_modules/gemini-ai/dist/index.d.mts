import { ProxyAgent } from 'undici';

type FileType = "image/png" | "image/jpeg" | "image/webp" | "image/heic" | "image/heif" | "audio/wav" | "audio/mp3" | "audio/aiff" | "audio/aac" | "audio/ogg" | "audio/flac" | "video/mp4" | "video/mpeg" | "video/mov" | "video/avi" | "video/x-flv" | "video/mpg" | "video/webm" | "video/wmv" | "video/3gpp";
type RemoteFilePart = {
    fileData: {
        mime_type: FileType;
        fileUri: string;
    };
};
type InlineFilePart = {
    inline_data: {
        mime_type: FileType;
        data: string;
    };
};
type TextPart = {
    text: string;
};
type Part = TextPart | RemoteFilePart | InlineFilePart;
type Role = "user" | "model" | "system";
type SafetyRating = {
    category: string;
    probability: string;
};
type Message = {
    parts: Part[];
    role: Role;
};
type PromptFeedback = {
    blockReason?: string;
    safetyRatings: SafetyRating[];
};
type Candidate = {
    content: {
        parts: TextPart[];
        role: Role;
    };
    finishReason: string;
    index: number;
    safetyRatings: SafetyRating[];
};
type GeminiResponse = {
    candidates: Candidate[];
    promptFeedback: PromptFeedback;
};
declare enum Command {
    StreamGenerate = "streamGenerateContent",
    Generate = "generateContent",
    Embed = "embedContent",
    Count = "countTokens"
}
declare enum HarmCategory {
    HateSpeech = "HARM_CATEGORY_HATE_SPEECH",
    SexuallyExplicit = "HARM_CATEGORY_SEXUALLY_EXPLICIT",
    Harassment = "HARM_CATEGORY_HARASSMENT",
    DangerousContent = "HARM_CATEGORY_DANGEROUS_CONTENT"
}
/**
 * The body used for the API call to generateContent or streamGenerateContent
 */
type GenerateContentBody = {
    contents: Message[];
    generationConfig: {
        maxOutputTokens: number;
        temperature: number;
        topP: number;
        topK: number;
        responseMimeType?: string;
        responseSchema?: Schema;
    };
    safetySettings: {
        category: HarmCategory;
        threshold: SafetyThreshold;
    }[];
    systemInstruction?: Message;
};
/**
 * The response from the REST API to generateContent or streamGenerateContent
 */
type GenerateContentQueryOutput = {
    candidates: Candidate[];
    promptFeedback: PromptFeedback;
};
/**
 * The body used for the API call for each command
 */
type QueryBodyMap = {
    [Command.StreamGenerate]: GenerateContentBody;
    [Command.Generate]: GenerateContentBody;
    [Command.Count]: {
        contents: Message[];
    };
    [Command.Embed]: {
        model: string;
        content: Message;
    };
};
/**
 * The response from the REST API for each command
 */
type QueryResponseMap = {
    [Command.StreamGenerate]: GenerateContentQueryOutput;
    [Command.Generate]: GenerateContentQueryOutput;
    [Command.Embed]: {
        embedding: {
            values: number[];
        };
    };
    [Command.Count]: {
        totalTokens: number;
    };
};
type TextFormat = "text";
type JSONFormat = "json";
type Format = TextFormat | JSONFormat;
/**
 * The output format for each command.
 */
type CommandResponseMap<F extends Format = TextFormat> = {
    [Command.StreamGenerate]: F extends JSONFormat ? QueryResponseMap[Command.StreamGenerate] : string;
    [Command.Generate]: F extends JSONFormat ? QueryResponseMap[Command.Generate] : string;
    [Command.Embed]: number[];
    [Command.Count]: number;
};
type GeminiOptions = {
    fetch?: typeof fetch;
    apiVersion?: string;
    dispatcher?: ProxyAgent;
};
/**
 * The option format for each command.
 */
type CommandOptionMap<F extends Format = TextFormat> = {
    [Command.Generate]: {
        temperature: number;
        topP: number;
        topK: number;
        format: F;
        maxOutputTokens: number;
        model: string;
        data: Buffer[];
        systemInstruction: string;
        safetySettings: {
            hate: SafetyThreshold;
            sexual: SafetyThreshold;
            harassment: SafetyThreshold;
            dangerous: SafetyThreshold;
        };
        messages: ([string, string] | Message)[];
        stream?(stream: CommandResponseMap<F>[Command.StreamGenerate]): void;
        jsonSchema: boolean | Schema;
    };
    [Command.Embed]: {
        model: string;
    };
    [Command.Count]: {
        model: string;
    };
};
declare enum SafetyThreshold {
    BLOCK_MOST = "BLOCK_LOW_AND_ABOVE",
    BLOCK_SOME = "BLOCK_MEDIUM_AND_ABOVE",
    BLOCK_FEW = "BLOCK_ONLY_HIGH",
    BLOCK_NONE = "BLOCK_NONE"
}
type ChatOptions = {
    messages: [string, string][] | Message[];
    temperature: number;
    topP: number;
    topK: number;
    model: string;
    maxOutputTokens: number;
    systemInstruction: string;
};
type ChatAskOptions<F extends Format = TextFormat> = {
    format: F;
    data: [];
    stream?(stream: CommandResponseMap<F>[Command.StreamGenerate]): void;
    jsonSchema: boolean | Schema;
};
declare enum SchemaType {
    /** String type. */
    STRING = "STRING",
    /** Number type. */
    NUMBER = "NUMBER",
    /** Integer type. */
    INTEGER = "INTEGER",
    /** Boolean type. */
    BOOLEAN = "BOOLEAN",
    /** Array type. */
    ARRAY = "ARRAY",
    /** Object type. */
    OBJECT = "OBJECT"
}
/**
 * Schema is used to define the format of input/output data.
 * Represents a select subset of an OpenAPI 3.0 schema object.
 * More fields may be added in the future as needed.
 * @public
 */
interface Schema {
    /**
     * Optional. The type of the property. {@link
     * FunctionDeclarationSchemaType}.
     */
    type?: SchemaType;
    /** Optional. The format of the property. */
    format?: string;
    /** Optional. The description of the property. */
    description?: string;
    /** Optional. Whether the property is nullable. */
    nullable?: boolean;
    /** Optional. The items of the property. {@link FunctionDeclarationSchema} */
    items?: FunctionDeclarationSchema;
    /** Optional. The enum of the property. */
    enum?: string[];
    /** Optional. Map of {@link FunctionDeclarationSchema}. */
    properties?: {
        [k: string]: FunctionDeclarationSchema;
    };
    /** Optional. Array of required property. */
    required?: string[];
    /** Optional. The example of the property. */
    example?: unknown;
}
/**
 * Schema for parameters passed to {@link FunctionDeclaration.parameters}.
 * @public
 */
interface FunctionDeclarationSchema {
    /** The type of the parameter. */
    type: SchemaType;
    /** The format of the parameter. */
    properties: {
        [k: string]: Schema;
    };
    /** Optional. Description of the parameter. */
    description?: string;
    /** Optional. Array of required parameters. */
    required?: string[];
}

declare const messageToParts: (messages: (Uint8Array | ArrayBuffer | string)[], gemini: Gemini) => Promise<Part[]>;
declare class Gemini {
    readonly key: string;
    readonly apiVersion: string;
    readonly fetch: typeof fetch;
    static TEXT: "text";
    static JSON: "json";
    static SafetyThreshold: typeof SafetyThreshold;
    static SchemaType: typeof SchemaType;
    constructor(key: string, options?: Partial<GeminiOptions>);
    query<C extends Command>(model: string, command: C, body: QueryBodyMap[C]): Promise<Response>;
    count(message: string, options?: Partial<CommandOptionMap[Command.Count]>): Promise<CommandResponseMap[Command.Count]>;
    embed(message: string, options?: Partial<CommandOptionMap[Command.Embed]>): Promise<number[]>;
    private getTextObject;
    private switchFormat;
    private getText;
    private handleStream;
    ask<F extends Format = typeof Gemini.TEXT>(message: string | (string | Uint8Array | ArrayBuffer)[] | Message, options?: Partial<CommandOptionMap<F>[Command.Generate]>): Promise<CommandResponseMap<F>[Command.Generate]>;
    createChat(options?: Partial<ChatOptions>): Chat;
}
declare class Chat {
    gemini: Gemini;
    options: ChatOptions;
    messages: Message[];
    constructor(gemini: Gemini, options?: Partial<ChatOptions>);
    ask<F extends Format = typeof Gemini.TEXT>(message: string | (string | Uint8Array | ArrayBuffer)[] | Message, options?: Partial<ChatAskOptions<F>>): Promise<CommandResponseMap<F>[Command.Generate]>;
}

export { type ChatAskOptions, type ChatOptions, type CommandOptionMap, type CommandResponseMap, type Format, type GeminiOptions, type GeminiResponse, type Message, type Part, Gemini as default, messageToParts };
